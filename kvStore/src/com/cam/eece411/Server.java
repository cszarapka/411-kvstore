package com.cam.eece411;import java.io.BufferedReader;import java.io.FileReader;import java.io.IOException;import java.net.InetAddress;import java.net.SocketException;import java.net.UnknownHostException;import java.util.ArrayList;import java.util.List;import java.util.logging.Level;import java.util.logging.LogManager;import java.util.logging.Logger;import com.cam.eece411.Communication.AppResponse;import com.cam.eece411.Communication.Builder;import com.cam.eece411.Communication.Message;import com.cam.eece411.Communication.UDPSocket;import com.cam.eece411.Handlers.JoinHandler;import com.cam.eece411.Handlers.KVSHandler;import com.cam.eece411.Handlers.UpdateHandler;import com.cam.eece411.Structures.DHT;import com.cam.eece411.Structures.Node;import com.cam.eece411.Utilities.Commands;import com.cam.eece411.Utilities.Protocols;import com.cam.eece411.Utilities.Utils;public class Server{private static final Logger log = Logger.getLogger(Server.class.getName());public static Node me;public static Integer state;public static UDPSocket socket;public static UDPSocket joinSocket;public static UDPSocket repSocket;public static UDPSocket updateSocket;public static List<String> nodes = null;public static List<InetAddress> broadcastAddresses = null;public static void main(String[] args)throws SocketException,IOException,InterruptedException{setup();socket=new UDPSocket(Utils.MAIN_PORT);joinSocket=new UDPSocket(Utils.JOIN_PORT);updateSocket=new UDPSocket(Utils.UPDATE_PORT);repSocket=new UDPSocket(Utils.REP_PORT);Message msg;byte cmd;if(args.length>=1){if(args[0].equalsIgnoreCase("create")){createDHT();}if(args.length==2){if(args[1].equalsIgnoreCase("log")){Protocols.LOGGER_LEVEL=java.util.logging.Level.ALL;}}}readFrom(Utils.NODE_LIST);while(state==Utils.OUT_OF_DHT){attemptToJoin();}buildNodeList();(new Thread(new WDT(Utils.WDT_PORT))).start();while(state == Utils.IN_DHT){msg=socket.receive();cmd=msg.getCommand();if(Commands.isKVSCommand(cmd)){(new Thread(new KVSHandler(msg,socket))).start();}else if(Commands.isJoinMessage(cmd)){(new Thread(new JoinHandler(msg,joinSocket))).start();}else if(Commands.isUpdate(cmd)){(new Thread(new UpdateHandler(msg,repSocket,updateSocket))).start();}else if(cmd==Commands.SHUTDOWN){respondToSHUTDOWN(msg);System.exit(0);}}socket.close();}public static void setup(){try{me=new Node(Utils.MAX_NODE_NUMBER,InetAddress.getLocalHost());}catch(UnknownHostException e){}state = Utils.OUT_OF_DHT;}public static void readFrom(String file){nodes=new ArrayList<String>();BufferedReader br=null;try{String currentLine;br=new BufferedReader(new FileReader(file));while((currentLine=br.readLine())!=null){nodes.add(currentLine.trim());}}catch(IOException e){}finally{try{if(br!=null)br.close();}catch(IOException e){}}}public static void createDHT(){DHT.add(me);state=Utils.IN_DHT;}public static void attemptToJoin(){messageRandomNode();Message msg=receiveJoinResponse();if(msg!=null){if(msg.getCommand()==Commands.JOIN_RESPONSE){me.id=msg.getNodeID();DHT.add(msg.getNodes());DHT.add(me);for(Node node:DHT.nodes()){node.updateTimestamp();}state=Utils.IN_DHT;socket.broadcast(Builder.isAlive(me),DHT.broadcastList(),Utils.MAIN_PORT);}}}	public static void messageRandomNode(){int random=(int)(Math.random()*(nodes.size()-1));InetAddress addr=null;if(!me.name.equals(nodes.get(random))){try{addr=InetAddress.getByName(nodes.get(random));socket.send(Builder.joinRequest(),addr,Utils.MAIN_PORT);}catch(UnknownHostException e){}}}public static void buildNodeList(){broadcastAddresses=new ArrayList<InetAddress>();for(int i = 0;i < nodes.size();i++){try{broadcastAddresses.add(InetAddress.getByName(nodes.get(i)));}catch(UnknownHostException e){}}}public static Message receiveJoinResponse(){socket.setTimeout(Utils.JOIN_TIMEOUT);Message msg=socket.receive();if(msg==null){}else{socket.setTimeout(0);}return msg;}public static void respondToSHUTDOWN(Message msg){send(new AppResponse(msg,Commands.SUCCESS));}public static void send(AppResponse r){socket.send(r.buffer,r.ipToSendTo,r.portToSendTo);}}